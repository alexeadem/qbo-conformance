#!/bin/bash
trap "echo; exit" INT
shopt -s expand_aliases
. ./qbot.sh


exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}



# sonobuoy binary path
SONOBUOY=$HOME/sonobuoy/sonobuoy
SONOBUOY_DIR=$HOME/sonobuoy/
PROD_NAME=qbo
OUTPUT_DIR=$HOME/sonobuoy

DEMO_PROMPT="\e[0;38;5;231;48;5;31;1m\] qbot \e[0;38;5;31;48;22m\]\e[0m "

REPO=hub.docker.com/kindest/node
#alias qbo=cli
color=31
usage() {
	echo -e "\033[1;38;5;${color}m>>>\033[0m $0 \033[1;38;5;${color}mhelp\033[0m         -- Show usage"
	echo -e "\033[1;38;5;${color}m>>>\033[0m $0 \033[1;38;5;${color}mlist\033[0m         -- List available Kubernetes image tags"
    	echo -e "\033[1;38;5;${color}m>>>\033[0m $0 \033[1;38;5;${color}mrun {tag}\033[0m    -- Run CNCF conformance results for qbo"
	exit 1;
}

if [ "$1" = "list" ]; then
	pei "qbo get images -A | jq -r .images[]?.tag"
	exit 0
elif [ "$1" = "run" ]; then
	shift $((OPTIND))
elif [ "$1" = "help" ]; then
	usage
fi

if [ -f /.dockerenv ]; then
	alias qbo=cli
else
	alias qbo="docker run --rm --name qbo-cli --network host -i -v ~/.qbo:/tmp/qbo registry.eadem.com/alex/qbo-src/qbo-cli:latest valgrind --leak-check=full  cli"
fi

# BEGIN dir
if [ ! -d $SONOBUOY_DIR ]; then 
       mkdir -p $SONOBUOY_DIR
fi
# END dir

# BEGIN check tag
TAGS=$(qbo get images -A | jq -r .images[]?.tag)

match=0
TAG="v1.28.0"
for i in $TAGS; do
	#echo $i
	if [ "$i" = "$1" ]; then
		match=1
		TAG=$i
	fi
done

if [ $match = 0 ]; then

	echo "Not Found -- tag $1"
	usage
fi

DEMO_PROMPT="\e[0;38;5;231;48;5;31;1m qbot \e[0;38;5;31;48;5;236;22m \e[0;38;5;250;48;5;236mconformance \e[0;38;5;236;48;5;226m\e[226;38;5;0;48;5;11m $TAG \e[0;38;5;245;48;5;240;22m\e[0;38;5;226;49;22m \e[0m"

NAME=$(echo $TAG | sed 's/[^a-zA-Z0-9 ]/_/g')
#echo $NAME
# END check tag

# BEGIN qbo cluster
pei "qbo add cluster $NAME -i hub.docker.com/kindest/node:$TAG | jq"
# END qbo cluster


# BEGIN kubeconfig
pei "qbo version | jq .version[]?"
pei "qbo get nodes $NAME | jq '.nodes[]?'"
V=$(qbo version | jq -r '.version[]?.qbo_api | select( . != null)' | cut -d '-' -f1)
if [ "$V" = "home" ]; then
        pei "export KUBECONFIG=/tmp/qbo/$NAME.conf"
else
        pei "qbo get cluster $NAME -k | jq -r '.output[]?.kubeconfig | select( . != null)' > $HOME/.qbo/$NAME.conf"
        pei "export KUBECONFIG=$HOME/.qbo/$NAME.conf"
fi
pei "kubectl get nodes"

# END kubeconfig
#exit 0
# BEGIN sonobuoy git
#if [ ! -d $SONOBUOY_DIR ]; then 
#	pei "git clone https://github.com/vmware-tanzu/sonobuoy.git"
#	cd $SONOBUOY_DIR
#else 
#	pei "cd $SONOBUOY_DIR"
#	pei "git config pull.rebase false"
#	pei "git pull"
#fi
# END sonobuoy git


cd $SONOBUOY_DIR
# BEGIN sonobuoy bin

if [ -f "$SONOBUOY" ] && [ -x :"$SONOBUOY" ]; then 
	if [ "$V" = "home" ]; then
		pei "$SONOBUOY version --kubeconfig /tmp/qbo/$NAME.conf"
	else	
		pei "$SONOBUOY version --kubeconfig $HOME/.qbo/$NAME.conf"
	fi
else
	pei "curl -O -L  https://github.com/vmware-tanzu/sonobuoy/releases/download/v0.56.16/sonobuoy_0.56.16_linux_amd64.tar.gz"
	pei "tar -xvzf sonobuoy_0.56.16_linux_amd64.tar.gz"
	if [ "$V" = "home" ]; then
                pei "$SONOBUOY version --kubeconfig /tmp/qbo/$NAME.conf"
        else    
                pei "$SONOBUOY version --kubeconfig $HOME/.qbo/$NAME.conf"
        fi
fi
# END sonobuoy bin


# BEGIN backup previous results
if [ -d results ]; then
    mv results results-`date +%Y%m%d%H%M%S`
fi
# END backup previous results

K8S_VERSION=$(kubectl version -o json  | jq -r .serverVersion.gitVersion | cut -d '.' -f 1-2)
echo "K8S_VERSION=$K8S_VERSION"

if [ -z $K8S_VERSION ]; then

    echo "Unable to get kubectl version"
    exit 1;
fi

QBO_VERSION=$(qbo version | jq -r '.version[]?.qbo_api')
echo "QBO_VERSION=$QBO_VERSION"
if [ -z "$QBO_VERSION" ]; then

    echo "Unable to get qbo version"
    exit 1;
fi

#exit 0
# BEGIN run conformance
pei "$SONOBUOY run --mode=certified-conformance --wait"
exit_on_code $?
# END run conformance


# BEGIN results
OUTFILE=$($SONOBUOY retrieve)
pei "mkdir ./results; tar xzf $OUTFILE -C ./results"

if [ ! -d  ${OUTPUT_DIR}/${K8S_VERSION}/${PROD_NAME}/ ]; then
    pei "mkdir -p ./${K8S_VERSION}/${PROD_NAME}"
fi
pei "cp ./results/plugins/e2e/results/global/* ${OUTPUT_DIR}/${K8S_VERSION}/${PROD_NAME}/"
# END results

# BEGIN docs
cat << EOF > ${OUTPUT_DIR}/${K8S_VERSION}/${PROD_NAME}/PRODUCT.yaml
vendor: QBO LLC
name: $PROD_NAME cloud
version: $QBO_VERSION
website_url: https://www.qbo.io
repo_url: https://github.com/alexeadem/qbo-home
documentation_url: https://docs.qbo.io
product_logo_url: https://raw.githubusercontent.com/alexeadem/qbo-home/master/qbo_250x150.svg
type: distribution
description: "Qbo is a pure containerized Kubernetes distribution delivering metal performance with zero virtualization. It brings a faster and simplified cloud experience for anyone, anywhere."
contact_email_address: info@qbo.io
EOF

cd -
cat README.md > ${OUTPUT_DIR}/${K8S_VERSION}/${PROD_NAME}/README.md
# END docs

pei "cat ${OUTPUT_DIR}/${K8S_VERSION}/${PROD_NAME}/e2e.log | grep Pass"

p ""
